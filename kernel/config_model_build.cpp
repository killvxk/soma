/**
 * @file	config_model_build.cpp
 * @brief	設定モデル構築関数実装。
 * @author	Masakazu Asama <m-asama@ginzado.co.jp>
 */

#include "config_management.h"
#include "config_model_build.h"
#include "config_model_node.h"
#include "config_model_nodes.h"
#include "config_model_descriptions.h"
#include "config_model_formats.h"
#include "config_model_functions.h"

void
config_model_build()
{
	config_model_node *t;

	config_model_node_root = new config_model_node;
	config_model_node_root->statement(config_model_node_statement::statement_container);

	cmn_interfaces = new config_model_node;
	cmn_interfaces_interface_ = new config_model_node;
	cmn_interfaces_interface__name = new config_model_node;
	t = cmn_interfaces_interface__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_interfaces_interface_);
	cmn_interfaces_interface_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__name_validate);
	t->commit(cmn_interfaces_interface__name_commit);
	t->description(cmn_interfaces_interface__name_dscr);
	t->format(fmt_string);
	cmn_interfaces_interface__description = new config_model_node;
	t = cmn_interfaces_interface__description;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("description");
	t->parent(cmn_interfaces_interface_);
	cmn_interfaces_interface_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__description_validate);
	t->commit(cmn_interfaces_interface__description_commit);
	t->description(cmn_interfaces_interface__description_dscr);
	t->format(fmt_string);
	cmn_interfaces_interface__type = new config_model_node;
	t = cmn_interfaces_interface__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_interfaces_interface_);
	cmn_interfaces_interface_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_interfaces_interface__type_validate);
	t->commit(cmn_interfaces_interface__type_commit);
	t->description(cmn_interfaces_interface__type_dscr);
	t->format(fmt_identityref);
	cmn_interfaces_interface__enabled = new config_model_node;
	t = cmn_interfaces_interface__enabled;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("enabled");
	t->parent(cmn_interfaces_interface_);
	cmn_interfaces_interface_->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__enabled_validate);
	t->commit(cmn_interfaces_interface__enabled_commit);
	t->description(cmn_interfaces_interface__enabled_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_interface__link_up_down_trap_enable = new config_model_node;
	t = cmn_interfaces_interface__link_up_down_trap_enable;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("link-up-down-trap-enable");
	t->parent(cmn_interfaces_interface_);
	cmn_interfaces_interface_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__link_up_down_trap_enable_validate);
	t->commit(cmn_interfaces_interface__link_up_down_trap_enable_commit);
	t->description(cmn_interfaces_interface__link_up_down_trap_enable_dscr);
	t->format(fmt_enumeration);
	cmn_interfaces_interface__ipv4 = new config_model_node;
	cmn_interfaces_interface__ipv4_enabled = new config_model_node;
	t = cmn_interfaces_interface__ipv4_enabled;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("enabled");
	t->parent(cmn_interfaces_interface__ipv4);
	cmn_interfaces_interface__ipv4->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_enabled_validate);
	t->commit(cmn_interfaces_interface__ipv4_enabled_commit);
	t->description(cmn_interfaces_interface__ipv4_enabled_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_interface__ipv4_forwarding = new config_model_node;
	t = cmn_interfaces_interface__ipv4_forwarding;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("forwarding");
	t->parent(cmn_interfaces_interface__ipv4);
	cmn_interfaces_interface__ipv4->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("false");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_forwarding_validate);
	t->commit(cmn_interfaces_interface__ipv4_forwarding_commit);
	t->description(cmn_interfaces_interface__ipv4_forwarding_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_interface__ipv4_mtu = new config_model_node;
	t = cmn_interfaces_interface__ipv4_mtu;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("mtu");
	t->parent(cmn_interfaces_interface__ipv4);
	cmn_interfaces_interface__ipv4->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_mtu_validate);
	t->commit(cmn_interfaces_interface__ipv4_mtu_commit);
	t->description(cmn_interfaces_interface__ipv4_mtu_dscr);
	t->format(fmt_uint16);
	cmn_interfaces_interface__ipv4_address_ = new config_model_node;
	cmn_interfaces_interface__ipv4_address__ip = new config_model_node;
	t = cmn_interfaces_interface__ipv4_address__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_interface__ipv4_address_);
	cmn_interfaces_interface__ipv4_address_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9\\.]*")));
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_address__ip_validate);
	t->commit(cmn_interfaces_interface__ipv4_address__ip_commit);
	t->description(cmn_interfaces_interface__ipv4_address__ip_dscr);
	t->format(fmt_ipv4_address_no_zone);
	cmn_interfaces_interface__ipv4_address__prefix_length = new config_model_node;
	t = cmn_interfaces_interface__ipv4_address__prefix_length;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("prefix-length");
	t->parent(cmn_interfaces_interface__ipv4_address_);
	cmn_interfaces_interface__ipv4_address_->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_address__prefix_length_validate);
	t->commit(cmn_interfaces_interface__ipv4_address__prefix_length_commit);
	t->description(cmn_interfaces_interface__ipv4_address__prefix_length_dscr);
	t->format(fmt_uint8);
	cmn_interfaces_interface__ipv4_address__netmask = new config_model_node;
	t = cmn_interfaces_interface__ipv4_address__netmask;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("netmask");
	t->parent(cmn_interfaces_interface__ipv4_address_);
	cmn_interfaces_interface__ipv4_address_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_address__netmask_validate);
	t->commit(cmn_interfaces_interface__ipv4_address__netmask_commit);
	t->description(cmn_interfaces_interface__ipv4_address__netmask_dscr);
	t->format(fmt_dotted_quad);
	t = cmn_interfaces_interface__ipv4_address_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("address");
	t->parent(cmn_interfaces_interface__ipv4);
	cmn_interfaces_interface__ipv4->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_interface__ipv4_address__ip);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_address__validate);
	t->commit(cmn_interfaces_interface__ipv4_address__commit);
	t->description(cmn_interfaces_interface__ipv4_address__dscr);
	cmn_interfaces_interface__ipv4_neighbor_ = new config_model_node;
	cmn_interfaces_interface__ipv4_neighbor__ip = new config_model_node;
	t = cmn_interfaces_interface__ipv4_neighbor__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_interface__ipv4_neighbor_);
	cmn_interfaces_interface__ipv4_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9\\.]*")));
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_neighbor__ip_validate);
	t->commit(cmn_interfaces_interface__ipv4_neighbor__ip_commit);
	t->description(cmn_interfaces_interface__ipv4_neighbor__ip_dscr);
	t->format(fmt_ipv4_address_no_zone);
	cmn_interfaces_interface__ipv4_neighbor__link_layer_address = new config_model_node;
	t = cmn_interfaces_interface__ipv4_neighbor__link_layer_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("link-layer-address");
	t->parent(cmn_interfaces_interface__ipv4_neighbor_);
	cmn_interfaces_interface__ipv4_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_neighbor__link_layer_address_validate);
	t->commit(cmn_interfaces_interface__ipv4_neighbor__link_layer_address_commit);
	t->description(cmn_interfaces_interface__ipv4_neighbor__link_layer_address_dscr);
	t->format(fmt_phys_address);
	t = cmn_interfaces_interface__ipv4_neighbor_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("neighbor");
	t->parent(cmn_interfaces_interface__ipv4);
	cmn_interfaces_interface__ipv4->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_interface__ipv4_neighbor__ip);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_neighbor__validate);
	t->commit(cmn_interfaces_interface__ipv4_neighbor__commit);
	t->description(cmn_interfaces_interface__ipv4_neighbor__dscr);
	t = cmn_interfaces_interface__ipv4;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv4");
	t->parent(cmn_interfaces_interface_);
	cmn_interfaces_interface_->add_child(*t);
	t->presence(true);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv4_validate);
	t->commit(cmn_interfaces_interface__ipv4_commit);
	t->description(cmn_interfaces_interface__ipv4_dscr);
	cmn_interfaces_interface__ipv6 = new config_model_node;
	cmn_interfaces_interface__ipv6_enabled = new config_model_node;
	t = cmn_interfaces_interface__ipv6_enabled;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("enabled");
	t->parent(cmn_interfaces_interface__ipv6);
	cmn_interfaces_interface__ipv6->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_enabled_validate);
	t->commit(cmn_interfaces_interface__ipv6_enabled_commit);
	t->description(cmn_interfaces_interface__ipv6_enabled_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_interface__ipv6_forwarding = new config_model_node;
	t = cmn_interfaces_interface__ipv6_forwarding;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("forwarding");
	t->parent(cmn_interfaces_interface__ipv6);
	cmn_interfaces_interface__ipv6->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("false");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_forwarding_validate);
	t->commit(cmn_interfaces_interface__ipv6_forwarding_commit);
	t->description(cmn_interfaces_interface__ipv6_forwarding_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_interface__ipv6_mtu = new config_model_node;
	t = cmn_interfaces_interface__ipv6_mtu;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("mtu");
	t->parent(cmn_interfaces_interface__ipv6);
	cmn_interfaces_interface__ipv6->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_mtu_validate);
	t->commit(cmn_interfaces_interface__ipv6_mtu_commit);
	t->description(cmn_interfaces_interface__ipv6_mtu_dscr);
	t->format(fmt_uint32);
	cmn_interfaces_interface__ipv6_address_ = new config_model_node;
	cmn_interfaces_interface__ipv6_address__ip = new config_model_node;
	t = cmn_interfaces_interface__ipv6_address__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_interface__ipv6_address_);
	cmn_interfaces_interface__ipv6_address_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9a-fA-F:\\.]*")));
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_address__ip_validate);
	t->commit(cmn_interfaces_interface__ipv6_address__ip_commit);
	t->description(cmn_interfaces_interface__ipv6_address__ip_dscr);
	t->format(fmt_ipv6_address_no_zone);
	cmn_interfaces_interface__ipv6_address__prefix_length = new config_model_node;
	t = cmn_interfaces_interface__ipv6_address__prefix_length;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("prefix-length");
	t->parent(cmn_interfaces_interface__ipv6_address_);
	cmn_interfaces_interface__ipv6_address_->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_address__prefix_length_validate);
	t->commit(cmn_interfaces_interface__ipv6_address__prefix_length_commit);
	t->description(cmn_interfaces_interface__ipv6_address__prefix_length_dscr);
	t->format(fmt_uint8);
	t = cmn_interfaces_interface__ipv6_address_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("address");
	t->parent(cmn_interfaces_interface__ipv6);
	cmn_interfaces_interface__ipv6->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_interface__ipv6_address__ip);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_address__validate);
	t->commit(cmn_interfaces_interface__ipv6_address__commit);
	t->description(cmn_interfaces_interface__ipv6_address__dscr);
	cmn_interfaces_interface__ipv6_neighbor_ = new config_model_node;
	cmn_interfaces_interface__ipv6_neighbor__ip = new config_model_node;
	t = cmn_interfaces_interface__ipv6_neighbor__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_interface__ipv6_neighbor_);
	cmn_interfaces_interface__ipv6_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9a-fA-F:\\.]*")));
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_neighbor__ip_validate);
	t->commit(cmn_interfaces_interface__ipv6_neighbor__ip_commit);
	t->description(cmn_interfaces_interface__ipv6_neighbor__ip_dscr);
	t->format(fmt_ipv6_address_no_zone);
	cmn_interfaces_interface__ipv6_neighbor__link_layer_address = new config_model_node;
	t = cmn_interfaces_interface__ipv6_neighbor__link_layer_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("link-layer-address");
	t->parent(cmn_interfaces_interface__ipv6_neighbor_);
	cmn_interfaces_interface__ipv6_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_neighbor__link_layer_address_validate);
	t->commit(cmn_interfaces_interface__ipv6_neighbor__link_layer_address_commit);
	t->description(cmn_interfaces_interface__ipv6_neighbor__link_layer_address_dscr);
	t->format(fmt_phys_address);
	t = cmn_interfaces_interface__ipv6_neighbor_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("neighbor");
	t->parent(cmn_interfaces_interface__ipv6);
	cmn_interfaces_interface__ipv6->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_interface__ipv6_neighbor__ip);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_neighbor__validate);
	t->commit(cmn_interfaces_interface__ipv6_neighbor__commit);
	t->description(cmn_interfaces_interface__ipv6_neighbor__dscr);
	cmn_interfaces_interface__ipv6_dup_addr_detect_transmits = new config_model_node;
	t = cmn_interfaces_interface__ipv6_dup_addr_detect_transmits;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("dup-addr-detect-transmits");
	t->parent(cmn_interfaces_interface__ipv6);
	cmn_interfaces_interface__ipv6->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("1");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_dup_addr_detect_transmits_validate);
	t->commit(cmn_interfaces_interface__ipv6_dup_addr_detect_transmits_commit);
	t->description(cmn_interfaces_interface__ipv6_dup_addr_detect_transmits_dscr);
	t->format(fmt_uint32);
	cmn_interfaces_interface__ipv6_autoconf = new config_model_node;
	cmn_interfaces_interface__ipv6_autoconf_create_global_addresses = new config_model_node;
	t = cmn_interfaces_interface__ipv6_autoconf_create_global_addresses;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("create-global-addresses");
	t->parent(cmn_interfaces_interface__ipv6_autoconf);
	cmn_interfaces_interface__ipv6_autoconf->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_autoconf_create_global_addresses_validate);
	t->commit(cmn_interfaces_interface__ipv6_autoconf_create_global_addresses_commit);
	t->description(cmn_interfaces_interface__ipv6_autoconf_create_global_addresses_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_interface__ipv6_autoconf_create_temporary_addresses = new config_model_node;
	t = cmn_interfaces_interface__ipv6_autoconf_create_temporary_addresses;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("create-temporary-addresses");
	t->parent(cmn_interfaces_interface__ipv6_autoconf);
	cmn_interfaces_interface__ipv6_autoconf->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("false");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_autoconf_create_temporary_addresses_validate);
	t->commit(cmn_interfaces_interface__ipv6_autoconf_create_temporary_addresses_commit);
	t->description(cmn_interfaces_interface__ipv6_autoconf_create_temporary_addresses_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_interface__ipv6_autoconf_temporary_valid_lifetime = new config_model_node;
	t = cmn_interfaces_interface__ipv6_autoconf_temporary_valid_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("temporary-valid-lifetime");
	t->parent(cmn_interfaces_interface__ipv6_autoconf);
	cmn_interfaces_interface__ipv6_autoconf->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("604800");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_autoconf_temporary_valid_lifetime_validate);
	t->commit(cmn_interfaces_interface__ipv6_autoconf_temporary_valid_lifetime_commit);
	t->description(cmn_interfaces_interface__ipv6_autoconf_temporary_valid_lifetime_dscr);
	t->format(fmt_uint32);
	cmn_interfaces_interface__ipv6_autoconf_temporary_preferred_lifetime = new config_model_node;
	t = cmn_interfaces_interface__ipv6_autoconf_temporary_preferred_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("temporary-preferred-lifetime");
	t->parent(cmn_interfaces_interface__ipv6_autoconf);
	cmn_interfaces_interface__ipv6_autoconf->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("86400");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_autoconf_temporary_preferred_lifetime_validate);
	t->commit(cmn_interfaces_interface__ipv6_autoconf_temporary_preferred_lifetime_commit);
	t->description(cmn_interfaces_interface__ipv6_autoconf_temporary_preferred_lifetime_dscr);
	t->format(fmt_uint32);
	t = cmn_interfaces_interface__ipv6_autoconf;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("autoconf");
	t->parent(cmn_interfaces_interface__ipv6);
	cmn_interfaces_interface__ipv6->add_child(*t);
	t->presence(true);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_autoconf_validate);
	t->commit(cmn_interfaces_interface__ipv6_autoconf_commit);
	t->description(cmn_interfaces_interface__ipv6_autoconf_dscr);
	t = cmn_interfaces_interface__ipv6;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv6");
	t->parent(cmn_interfaces_interface_);
	cmn_interfaces_interface_->add_child(*t);
	t->presence(true);
	t->config(true);
	t->validate(cmn_interfaces_interface__ipv6_validate);
	t->commit(cmn_interfaces_interface__ipv6_commit);
	t->description(cmn_interfaces_interface__ipv6_dscr);
	t = cmn_interfaces_interface_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("interface");
	t->parent(cmn_interfaces);
	cmn_interfaces->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_interface__name);
	t->config(true);
	t->validate(cmn_interfaces_interface__validate);
	t->commit(cmn_interfaces_interface__commit);
	t->description(cmn_interfaces_interface__dscr);
	t = cmn_interfaces;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("interfaces");
	t->parent(config_model_node_root);
	config_model_node_root->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_interfaces_validate);
	t->commit(cmn_interfaces_commit);
	t->description(cmn_interfaces_dscr);
	cmn_interfaces_state = new config_model_node;
	cmn_interfaces_state_interface_ = new config_model_node;
	cmn_interfaces_state_interface__name = new config_model_node;
	t = cmn_interfaces_state_interface__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__name_validate);
	t->commit(cmn_interfaces_state_interface__name_commit);
	t->description(cmn_interfaces_state_interface__name_dscr);
	t->format(fmt_string);
	cmn_interfaces_state_interface__type = new config_model_node;
	t = cmn_interfaces_state_interface__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__type_validate);
	t->commit(cmn_interfaces_state_interface__type_commit);
	t->description(cmn_interfaces_state_interface__type_dscr);
	t->format(fmt_identityref);
	cmn_interfaces_state_interface__admin_status = new config_model_node;
	t = cmn_interfaces_state_interface__admin_status;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("admin-status");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__admin_status_validate);
	t->commit(cmn_interfaces_state_interface__admin_status_commit);
	t->description(cmn_interfaces_state_interface__admin_status_dscr);
	t->format(fmt_enumeration);
	cmn_interfaces_state_interface__oper_status = new config_model_node;
	t = cmn_interfaces_state_interface__oper_status;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("oper-status");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__oper_status_validate);
	t->commit(cmn_interfaces_state_interface__oper_status_commit);
	t->description(cmn_interfaces_state_interface__oper_status_dscr);
	t->format(fmt_enumeration);
	cmn_interfaces_state_interface__last_change = new config_model_node;
	t = cmn_interfaces_state_interface__last_change;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("last-change");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__last_change_validate);
	t->commit(cmn_interfaces_state_interface__last_change_commit);
	t->description(cmn_interfaces_state_interface__last_change_dscr);
	t->format(fmt_date_and_time);
	cmn_interfaces_state_interface__if_index = new config_model_node;
	t = cmn_interfaces_state_interface__if_index;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("if-index");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->type(config_model_node_type::type_int32);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__if_index_validate);
	t->commit(cmn_interfaces_state_interface__if_index_commit);
	t->description(cmn_interfaces_state_interface__if_index_dscr);
	t->format(fmt_int32);
	cmn_interfaces_state_interface__phys_address = new config_model_node;
	t = cmn_interfaces_state_interface__phys_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("phys-address");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__phys_address_validate);
	t->commit(cmn_interfaces_state_interface__phys_address_commit);
	t->description(cmn_interfaces_state_interface__phys_address_dscr);
	t->format(fmt_phys_address);
	cmn_interfaces_state_interface__speed = new config_model_node;
	t = cmn_interfaces_state_interface__speed;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("speed");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__speed_validate);
	t->commit(cmn_interfaces_state_interface__speed_commit);
	t->description(cmn_interfaces_state_interface__speed_dscr);
	t->format(fmt_gauge64);
	cmn_interfaces_state_interface__statistics = new config_model_node;
	cmn_interfaces_state_interface__statistics_discontinuity_time = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_discontinuity_time;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("discontinuity-time");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->add_pattern(*(new config_model_pattern("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_discontinuity_time_validate);
	t->commit(cmn_interfaces_state_interface__statistics_discontinuity_time_commit);
	t->description(cmn_interfaces_state_interface__statistics_discontinuity_time_dscr);
	t->format(fmt_date_and_time);
	cmn_interfaces_state_interface__statistics_in_octets = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_in_octets;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("in-octets");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_in_octets_validate);
	t->commit(cmn_interfaces_state_interface__statistics_in_octets_commit);
	t->description(cmn_interfaces_state_interface__statistics_in_octets_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_in_unicast_pkts = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_in_unicast_pkts;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("in-unicast-pkts");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_in_unicast_pkts_validate);
	t->commit(cmn_interfaces_state_interface__statistics_in_unicast_pkts_commit);
	t->description(cmn_interfaces_state_interface__statistics_in_unicast_pkts_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_in_broadcast_pkts = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_in_broadcast_pkts;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("in-broadcast-pkts");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_in_broadcast_pkts_validate);
	t->commit(cmn_interfaces_state_interface__statistics_in_broadcast_pkts_commit);
	t->description(cmn_interfaces_state_interface__statistics_in_broadcast_pkts_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_in_multicast_pkts = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_in_multicast_pkts;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("in-multicast-pkts");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_in_multicast_pkts_validate);
	t->commit(cmn_interfaces_state_interface__statistics_in_multicast_pkts_commit);
	t->description(cmn_interfaces_state_interface__statistics_in_multicast_pkts_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_in_discards = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_in_discards;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("in-discards");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_in_discards_validate);
	t->commit(cmn_interfaces_state_interface__statistics_in_discards_commit);
	t->description(cmn_interfaces_state_interface__statistics_in_discards_dscr);
	t->format(fmt_counter32);
	cmn_interfaces_state_interface__statistics_in_errors = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_in_errors;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("in-errors");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_in_errors_validate);
	t->commit(cmn_interfaces_state_interface__statistics_in_errors_commit);
	t->description(cmn_interfaces_state_interface__statistics_in_errors_dscr);
	t->format(fmt_counter32);
	cmn_interfaces_state_interface__statistics_in_unknown_protos = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_in_unknown_protos;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("in-unknown-protos");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_in_unknown_protos_validate);
	t->commit(cmn_interfaces_state_interface__statistics_in_unknown_protos_commit);
	t->description(cmn_interfaces_state_interface__statistics_in_unknown_protos_dscr);
	t->format(fmt_counter32);
	cmn_interfaces_state_interface__statistics_out_octets = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_out_octets;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("out-octets");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_out_octets_validate);
	t->commit(cmn_interfaces_state_interface__statistics_out_octets_commit);
	t->description(cmn_interfaces_state_interface__statistics_out_octets_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_out_unicast_pkts = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_out_unicast_pkts;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("out-unicast-pkts");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_out_unicast_pkts_validate);
	t->commit(cmn_interfaces_state_interface__statistics_out_unicast_pkts_commit);
	t->description(cmn_interfaces_state_interface__statistics_out_unicast_pkts_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_out_broadcast_pkts = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_out_broadcast_pkts;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("out-broadcast-pkts");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_out_broadcast_pkts_validate);
	t->commit(cmn_interfaces_state_interface__statistics_out_broadcast_pkts_commit);
	t->description(cmn_interfaces_state_interface__statistics_out_broadcast_pkts_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_out_multicast_pkts = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_out_multicast_pkts;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("out-multicast-pkts");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_out_multicast_pkts_validate);
	t->commit(cmn_interfaces_state_interface__statistics_out_multicast_pkts_commit);
	t->description(cmn_interfaces_state_interface__statistics_out_multicast_pkts_dscr);
	t->format(fmt_counter64);
	cmn_interfaces_state_interface__statistics_out_discards = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_out_discards;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("out-discards");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_out_discards_validate);
	t->commit(cmn_interfaces_state_interface__statistics_out_discards_commit);
	t->description(cmn_interfaces_state_interface__statistics_out_discards_dscr);
	t->format(fmt_counter32);
	cmn_interfaces_state_interface__statistics_out_errors = new config_model_node;
	t = cmn_interfaces_state_interface__statistics_out_errors;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("out-errors");
	t->parent(cmn_interfaces_state_interface__statistics);
	cmn_interfaces_state_interface__statistics->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_out_errors_validate);
	t->commit(cmn_interfaces_state_interface__statistics_out_errors_commit);
	t->description(cmn_interfaces_state_interface__statistics_out_errors_dscr);
	t->format(fmt_counter32);
	t = cmn_interfaces_state_interface__statistics;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("statistics");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__statistics_validate);
	t->commit(cmn_interfaces_state_interface__statistics_commit);
	t->description(cmn_interfaces_state_interface__statistics_dscr);
	cmn_interfaces_state_interface__ipv4 = new config_model_node;
	cmn_interfaces_state_interface__ipv4_forwarding = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_forwarding;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("forwarding");
	t->parent(cmn_interfaces_state_interface__ipv4);
	cmn_interfaces_state_interface__ipv4->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_forwarding_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_forwarding_commit);
	t->description(cmn_interfaces_state_interface__ipv4_forwarding_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_state_interface__ipv4_mtu = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_mtu;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("mtu");
	t->parent(cmn_interfaces_state_interface__ipv4);
	cmn_interfaces_state_interface__ipv4->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_mtu_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_mtu_commit);
	t->description(cmn_interfaces_state_interface__ipv4_mtu_dscr);
	t->format(fmt_uint16);
	cmn_interfaces_state_interface__ipv4_address_ = new config_model_node;
	cmn_interfaces_state_interface__ipv4_address__ip = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_address__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_state_interface__ipv4_address_);
	cmn_interfaces_state_interface__ipv4_address_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9\\.]*")));
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_address__ip_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_address__ip_commit);
	t->description(cmn_interfaces_state_interface__ipv4_address__ip_dscr);
	t->format(fmt_ipv4_address_no_zone);
	cmn_interfaces_state_interface__ipv4_address__prefix_length = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_address__prefix_length;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("prefix-length");
	t->parent(cmn_interfaces_state_interface__ipv4_address_);
	cmn_interfaces_state_interface__ipv4_address_->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_address__prefix_length_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_address__prefix_length_commit);
	t->description(cmn_interfaces_state_interface__ipv4_address__prefix_length_dscr);
	t->format(fmt_uint8);
	cmn_interfaces_state_interface__ipv4_address__netmask = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_address__netmask;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("netmask");
	t->parent(cmn_interfaces_state_interface__ipv4_address_);
	cmn_interfaces_state_interface__ipv4_address_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_address__netmask_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_address__netmask_commit);
	t->description(cmn_interfaces_state_interface__ipv4_address__netmask_dscr);
	t->format(fmt_dotted_quad);
	cmn_interfaces_state_interface__ipv4_address__origin = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_address__origin;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("origin");
	t->parent(cmn_interfaces_state_interface__ipv4_address_);
	cmn_interfaces_state_interface__ipv4_address_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_address__origin_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_address__origin_commit);
	t->description(cmn_interfaces_state_interface__ipv4_address__origin_dscr);
	t->format(fmt_ip_address_origin);
	t = cmn_interfaces_state_interface__ipv4_address_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("address");
	t->parent(cmn_interfaces_state_interface__ipv4);
	cmn_interfaces_state_interface__ipv4->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_state_interface__ipv4_address__ip);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_address__validate);
	t->commit(cmn_interfaces_state_interface__ipv4_address__commit);
	t->description(cmn_interfaces_state_interface__ipv4_address__dscr);
	cmn_interfaces_state_interface__ipv4_neighbor_ = new config_model_node;
	cmn_interfaces_state_interface__ipv4_neighbor__ip = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_neighbor__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_state_interface__ipv4_neighbor_);
	cmn_interfaces_state_interface__ipv4_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9\\.]*")));
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_neighbor__ip_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_neighbor__ip_commit);
	t->description(cmn_interfaces_state_interface__ipv4_neighbor__ip_dscr);
	t->format(fmt_ipv4_address_no_zone);
	cmn_interfaces_state_interface__ipv4_neighbor__link_layer_address = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_neighbor__link_layer_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("link-layer-address");
	t->parent(cmn_interfaces_state_interface__ipv4_neighbor_);
	cmn_interfaces_state_interface__ipv4_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_neighbor__link_layer_address_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_neighbor__link_layer_address_commit);
	t->description(cmn_interfaces_state_interface__ipv4_neighbor__link_layer_address_dscr);
	t->format(fmt_phys_address);
	cmn_interfaces_state_interface__ipv4_neighbor__origin = new config_model_node;
	t = cmn_interfaces_state_interface__ipv4_neighbor__origin;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("origin");
	t->parent(cmn_interfaces_state_interface__ipv4_neighbor_);
	cmn_interfaces_state_interface__ipv4_neighbor_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_neighbor__origin_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_neighbor__origin_commit);
	t->description(cmn_interfaces_state_interface__ipv4_neighbor__origin_dscr);
	t->format(fmt_neighbor_origin);
	t = cmn_interfaces_state_interface__ipv4_neighbor_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("neighbor");
	t->parent(cmn_interfaces_state_interface__ipv4);
	cmn_interfaces_state_interface__ipv4->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_state_interface__ipv4_neighbor__ip);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_neighbor__validate);
	t->commit(cmn_interfaces_state_interface__ipv4_neighbor__commit);
	t->description(cmn_interfaces_state_interface__ipv4_neighbor__dscr);
	t = cmn_interfaces_state_interface__ipv4;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv4");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->presence(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv4_validate);
	t->commit(cmn_interfaces_state_interface__ipv4_commit);
	t->description(cmn_interfaces_state_interface__ipv4_dscr);
	cmn_interfaces_state_interface__ipv6 = new config_model_node;
	cmn_interfaces_state_interface__ipv6_forwarding = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_forwarding;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("forwarding");
	t->parent(cmn_interfaces_state_interface__ipv6);
	cmn_interfaces_state_interface__ipv6->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("false");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_forwarding_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_forwarding_commit);
	t->description(cmn_interfaces_state_interface__ipv6_forwarding_dscr);
	t->format(fmt_boolean);
	cmn_interfaces_state_interface__ipv6_mtu = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_mtu;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("mtu");
	t->parent(cmn_interfaces_state_interface__ipv6);
	cmn_interfaces_state_interface__ipv6->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_mtu_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_mtu_commit);
	t->description(cmn_interfaces_state_interface__ipv6_mtu_dscr);
	t->format(fmt_uint32);
	cmn_interfaces_state_interface__ipv6_address_ = new config_model_node;
	cmn_interfaces_state_interface__ipv6_address__ip = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_address__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_state_interface__ipv6_address_);
	cmn_interfaces_state_interface__ipv6_address_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9a-fA-F:\\.]*")));
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_address__ip_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_address__ip_commit);
	t->description(cmn_interfaces_state_interface__ipv6_address__ip_dscr);
	t->format(fmt_ipv6_address_no_zone);
	cmn_interfaces_state_interface__ipv6_address__prefix_length = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_address__prefix_length;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("prefix-length");
	t->parent(cmn_interfaces_state_interface__ipv6_address_);
	cmn_interfaces_state_interface__ipv6_address_->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_address__prefix_length_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_address__prefix_length_commit);
	t->description(cmn_interfaces_state_interface__ipv6_address__prefix_length_dscr);
	t->format(fmt_uint8);
	cmn_interfaces_state_interface__ipv6_address__origin = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_address__origin;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("origin");
	t->parent(cmn_interfaces_state_interface__ipv6_address_);
	cmn_interfaces_state_interface__ipv6_address_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_address__origin_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_address__origin_commit);
	t->description(cmn_interfaces_state_interface__ipv6_address__origin_dscr);
	t->format(fmt_ip_address_origin);
	cmn_interfaces_state_interface__ipv6_address__status = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_address__status;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("status");
	t->parent(cmn_interfaces_state_interface__ipv6_address_);
	cmn_interfaces_state_interface__ipv6_address_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_address__status_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_address__status_commit);
	t->description(cmn_interfaces_state_interface__ipv6_address__status_dscr);
	t->format(fmt_enumeration);
	t = cmn_interfaces_state_interface__ipv6_address_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("address");
	t->parent(cmn_interfaces_state_interface__ipv6);
	cmn_interfaces_state_interface__ipv6->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_state_interface__ipv6_address__ip);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_address__validate);
	t->commit(cmn_interfaces_state_interface__ipv6_address__commit);
	t->description(cmn_interfaces_state_interface__ipv6_address__dscr);
	cmn_interfaces_state_interface__ipv6_neighbor_ = new config_model_node;
	cmn_interfaces_state_interface__ipv6_neighbor__ip = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_neighbor__ip;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("ip");
	t->parent(cmn_interfaces_state_interface__ipv6_neighbor_);
	cmn_interfaces_state_interface__ipv6_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("[0-9a-fA-F:\\.]*")));
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_neighbor__ip_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_neighbor__ip_commit);
	t->description(cmn_interfaces_state_interface__ipv6_neighbor__ip_dscr);
	t->format(fmt_ipv6_address_no_zone);
	cmn_interfaces_state_interface__ipv6_neighbor__link_layer_address = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_neighbor__link_layer_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("link-layer-address");
	t->parent(cmn_interfaces_state_interface__ipv6_neighbor_);
	cmn_interfaces_state_interface__ipv6_neighbor_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_neighbor__link_layer_address_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_neighbor__link_layer_address_commit);
	t->description(cmn_interfaces_state_interface__ipv6_neighbor__link_layer_address_dscr);
	t->format(fmt_phys_address);
	cmn_interfaces_state_interface__ipv6_neighbor__origin = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_neighbor__origin;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("origin");
	t->parent(cmn_interfaces_state_interface__ipv6_neighbor_);
	cmn_interfaces_state_interface__ipv6_neighbor_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_neighbor__origin_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_neighbor__origin_commit);
	t->description(cmn_interfaces_state_interface__ipv6_neighbor__origin_dscr);
	t->format(fmt_neighbor_origin);
	cmn_interfaces_state_interface__ipv6_neighbor__is_router = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_neighbor__is_router;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("is-router");
	t->parent(cmn_interfaces_state_interface__ipv6_neighbor_);
	cmn_interfaces_state_interface__ipv6_neighbor_->add_child(*t);
	t->type(config_model_node_type::type_empty);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_neighbor__is_router_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_neighbor__is_router_commit);
	t->description(cmn_interfaces_state_interface__ipv6_neighbor__is_router_dscr);
	t->format(fmt_empty);
	cmn_interfaces_state_interface__ipv6_neighbor__state = new config_model_node;
	t = cmn_interfaces_state_interface__ipv6_neighbor__state;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("state");
	t->parent(cmn_interfaces_state_interface__ipv6_neighbor_);
	cmn_interfaces_state_interface__ipv6_neighbor_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_neighbor__state_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_neighbor__state_commit);
	t->description(cmn_interfaces_state_interface__ipv6_neighbor__state_dscr);
	t->format(fmt_enumeration);
	t = cmn_interfaces_state_interface__ipv6_neighbor_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("neighbor");
	t->parent(cmn_interfaces_state_interface__ipv6);
	cmn_interfaces_state_interface__ipv6->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_state_interface__ipv6_neighbor__ip);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_neighbor__validate);
	t->commit(cmn_interfaces_state_interface__ipv6_neighbor__commit);
	t->description(cmn_interfaces_state_interface__ipv6_neighbor__dscr);
	t = cmn_interfaces_state_interface__ipv6;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv6");
	t->parent(cmn_interfaces_state_interface_);
	cmn_interfaces_state_interface_->add_child(*t);
	t->presence(true);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__ipv6_validate);
	t->commit(cmn_interfaces_state_interface__ipv6_commit);
	t->description(cmn_interfaces_state_interface__ipv6_dscr);
	t = cmn_interfaces_state_interface_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("interface");
	t->parent(cmn_interfaces_state);
	cmn_interfaces_state->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_interfaces_state_interface__name);
	t->config(false);
	t->validate(cmn_interfaces_state_interface__validate);
	t->commit(cmn_interfaces_state_interface__commit);
	t->description(cmn_interfaces_state_interface__dscr);
	t = cmn_interfaces_state;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("interfaces-state");
	t->parent(config_model_node_root);
	config_model_node_root->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_interfaces_state_validate);
	t->commit(cmn_interfaces_state_commit);
	t->description(cmn_interfaces_state_dscr);
	cmn_routing_state = new config_model_node;
	cmn_routing_state_routing_instance_ = new config_model_node;
	cmn_routing_state_routing_instance__name = new config_model_node;
	t = cmn_routing_state_routing_instance__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_state_routing_instance_);
	cmn_routing_state_routing_instance_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__name_validate);
	t->commit(cmn_routing_state_routing_instance__name_commit);
	t->description(cmn_routing_state_routing_instance__name_dscr);
	t->format(fmt_string);
	cmn_routing_state_routing_instance__type = new config_model_node;
	t = cmn_routing_state_routing_instance__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_routing_state_routing_instance_);
	cmn_routing_state_routing_instance_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__type_validate);
	t->commit(cmn_routing_state_routing_instance__type_commit);
	t->description(cmn_routing_state_routing_instance__type_dscr);
	t->format(fmt_identityref);
	cmn_routing_state_routing_instance__default_ribs = new config_model_node;
	cmn_routing_state_routing_instance__default_ribs_default_rib_ = new config_model_node;
	cmn_routing_state_routing_instance__default_ribs_default_rib__rib_name = new config_model_node;
	t = cmn_routing_state_routing_instance__default_ribs_default_rib__rib_name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("rib-name");
	t->parent(cmn_routing_state_routing_instance__default_ribs_default_rib_);
	cmn_routing_state_routing_instance__default_ribs_default_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__default_ribs_default_rib__rib_name_validate);
	t->commit(cmn_routing_state_routing_instance__default_ribs_default_rib__rib_name_commit);
	t->description(cmn_routing_state_routing_instance__default_ribs_default_rib__rib_name_dscr);
	t->format(fmt_rib_state_ref);
	cmn_routing_state_routing_instance__default_ribs_default_rib__address_family = new config_model_node;
	t = cmn_routing_state_routing_instance__default_ribs_default_rib__address_family;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("address-family");
	t->parent(cmn_routing_state_routing_instance__default_ribs_default_rib_);
	cmn_routing_state_routing_instance__default_ribs_default_rib_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__default_ribs_default_rib__address_family_validate);
	t->commit(cmn_routing_state_routing_instance__default_ribs_default_rib__address_family_commit);
	t->description(cmn_routing_state_routing_instance__default_ribs_default_rib__address_family_dscr);
	t->format(fmt_identityref);
	t = cmn_routing_state_routing_instance__default_ribs_default_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("default-rib");
	t->parent(cmn_routing_state_routing_instance__default_ribs);
	cmn_routing_state_routing_instance__default_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_routing_instance__default_ribs_default_rib__address_family);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__default_ribs_default_rib__validate);
	t->commit(cmn_routing_state_routing_instance__default_ribs_default_rib__commit);
	t->description(cmn_routing_state_routing_instance__default_ribs_default_rib__dscr);
	t = cmn_routing_state_routing_instance__default_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("default-ribs");
	t->parent(cmn_routing_state_routing_instance_);
	cmn_routing_state_routing_instance_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__default_ribs_validate);
	t->commit(cmn_routing_state_routing_instance__default_ribs_commit);
	t->description(cmn_routing_state_routing_instance__default_ribs_dscr);
	cmn_routing_state_routing_instance__interfaces = new config_model_node;
	cmn_routing_state_routing_instance__interfaces_interface_ = new config_model_node;
	cmn_routing_state_routing_instance__interfaces_interface__name = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface_);
	cmn_routing_state_routing_instance__interfaces_interface_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__name_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__name_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__name_dscr);
	t->format(fmt_interface_state_ref);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements = new config_model_node;
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("send-advertisements");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements_dscr);
	t->format(fmt_boolean);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("max-rtr-adv-interval");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval_dscr);
	t->format(fmt_uint16);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("min-rtr-adv-interval");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval_dscr);
	t->format(fmt_uint16);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("managed-flag");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag_dscr);
	t->format(fmt_boolean);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("other-config-flag");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag_dscr);
	t->format(fmt_boolean);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("link-mtu");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu_dscr);
	t->format(fmt_uint32);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("reachable-time");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time_dscr);
	t->format(fmt_uint32);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("retrans-timer");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer_dscr);
	t->format(fmt_uint32);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("cur-hop-limit");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit_dscr);
	t->format(fmt_uint8);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("default-lifetime");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime_dscr);
	t->format(fmt_uint16);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list = new config_model_node;
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_ = new config_model_node;
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("prefix-spec");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec_dscr);
	t->format(fmt_ipv6_prefix);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("valid-lifetime");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime_dscr);
	t->format(fmt_uint32);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("on-link-flag");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag_dscr);
	t->format(fmt_boolean);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("preferred-lifetime");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime_dscr);
	t->format(fmt_uint32);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag = new config_model_node;
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("autonomous-flag");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag_dscr);
	t->format(fmt_boolean);
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("prefix");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__dscr);
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("prefix-list");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_dscr);
	t = cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv6-router-advertisements");
	t->parent(cmn_routing_state_routing_instance__interfaces_interface_);
	cmn_routing_state_routing_instance__interfaces_interface_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__ipv6_router_advertisements_dscr);
	t = cmn_routing_state_routing_instance__interfaces_interface_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("interface");
	t->parent(cmn_routing_state_routing_instance__interfaces);
	cmn_routing_state_routing_instance__interfaces->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_routing_instance__interfaces_interface__name);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__interfaces_interface__validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_interface__commit);
	t->description(cmn_routing_state_routing_instance__interfaces_interface__dscr);
	t = cmn_routing_state_routing_instance__interfaces;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("interfaces");
	t->parent(cmn_routing_state_routing_instance_);
	cmn_routing_state_routing_instance_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__interfaces_validate);
	t->commit(cmn_routing_state_routing_instance__interfaces_commit);
	t->description(cmn_routing_state_routing_instance__interfaces_dscr);
	cmn_routing_state_routing_instance__routing_protocols = new config_model_node;
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol_ = new config_model_node;
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__type = new config_model_node;
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__type_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__type_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__type_dscr);
	t->format(fmt_identityref);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__name = new config_model_node;
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__name_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__name_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__name_dscr);
	t->format(fmt_string);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__route_preference = new config_model_node;
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__route_preference;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("route-preference");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__route_preference_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__route_preference_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__route_preference_dscr);
	t->format(fmt_route_preference);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs = new config_model_node;
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_ = new config_model_node;
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name = new config_model_node;
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("rib-name");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name_dscr);
	t->format(fmt_rib_state_ref);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter = new config_model_node;
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("import-filter");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter_dscr);
	t->format(fmt_route_filter_state_ref);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter = new config_model_node;
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("export-filter");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter_dscr);
	t->format(fmt_route_filter_state_ref);
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("connected-rib");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__dscr);
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("connected-ribs");
	t->parent(cmn_routing_state_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_state_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__connected_ribs_dscr);
	t = cmn_routing_state_routing_instance__routing_protocols_routing_protocol_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("routing-protocol");
	t->parent(cmn_routing_state_routing_instance__routing_protocols);
	cmn_routing_state_routing_instance__routing_protocols->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_routing_instance__routing_protocols_routing_protocol__type);
	t->add_key(*cmn_routing_state_routing_instance__routing_protocols_routing_protocol__name);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_routing_protocol__dscr);
	t = cmn_routing_state_routing_instance__routing_protocols;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("routing-protocols");
	t->parent(cmn_routing_state_routing_instance_);
	cmn_routing_state_routing_instance_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__routing_protocols_validate);
	t->commit(cmn_routing_state_routing_instance__routing_protocols_commit);
	t->description(cmn_routing_state_routing_instance__routing_protocols_dscr);
	cmn_routing_state_routing_instance__id = new config_model_node;
	t = cmn_routing_state_routing_instance__id;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("id");
	t->parent(cmn_routing_state_routing_instance_);
	cmn_routing_state_routing_instance_->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_routing_instance__id_validate);
	t->commit(cmn_routing_state_routing_instance__id_commit);
	t->description(cmn_routing_state_routing_instance__id_dscr);
	t->format(fmt_uint64);
	t = cmn_routing_state_routing_instance_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("routing-instance");
	t->parent(cmn_routing_state);
	cmn_routing_state->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_routing_instance__name);
	t->add_unique(*cmn_routing_state_routing_instance__id);
	t->config(false);
	t->validate(cmn_routing_state_routing_instance__validate);
	t->commit(cmn_routing_state_routing_instance__commit);
	t->description(cmn_routing_state_routing_instance__dscr);
	cmn_routing_state_next_hop_lists = new config_model_node;
	cmn_routing_state_next_hop_lists_next_hop_list_ = new config_model_node;
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_ = new config_model_node;
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_list = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_list;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-list");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list__next_hop_);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_list_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_list_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_list_dscr);
	t->format(fmt_next_hop_list_ref);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop__use_rib = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop__use_rib;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("use-rib");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list__next_hop_);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__use_rib_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__use_rib_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__use_rib_dscr);
	t->format(fmt_rib_state_ref);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop__outgoing_interface = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop__outgoing_interface;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("outgoing-interface");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list__next_hop_);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__outgoing_interface_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__outgoing_interface_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__outgoing_interface_dscr);
	t->format(fmt_leafref);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_address = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-address");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list__next_hop_);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_address_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_address_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__next_hop_address_dscr);
	t->format(fmt_ipv4_address);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop__special_next_hop = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop__special_next_hop;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("special-next-hop");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list__next_hop_);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__special_next_hop_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__special_next_hop_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__special_next_hop_dscr);
	t->format(fmt_enumeration);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop__priority = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop__priority;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("priority");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list__next_hop_);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__priority_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__priority_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__priority_dscr);
	t->format(fmt_enumeration);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop__weight = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop__weight;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("weight");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list__next_hop_);
	cmn_routing_state_next_hop_lists_next_hop_list__next_hop_->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__weight_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__weight_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__weight_dscr);
	t->format(fmt_uint8);
	t = cmn_routing_state_next_hop_lists_next_hop_list__next_hop_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("next-hop");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list_);
	cmn_routing_state_next_hop_lists_next_hop_list_->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->config(false);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__next_hop__dscr);
	cmn_routing_state_next_hop_lists_next_hop_list__id = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__id;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("id");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list_);
	cmn_routing_state_next_hop_lists_next_hop_list_->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__id_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__id_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__id_dscr);
	t->format(fmt_uint64);
	cmn_routing_state_next_hop_lists_next_hop_list__address_family = new config_model_node;
	t = cmn_routing_state_next_hop_lists_next_hop_list__address_family;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("address-family");
	t->parent(cmn_routing_state_next_hop_lists_next_hop_list_);
	cmn_routing_state_next_hop_lists_next_hop_list_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__address_family_validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__address_family_commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__address_family_dscr);
	t->format(fmt_identityref);
	t = cmn_routing_state_next_hop_lists_next_hop_list_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("next-hop-list");
	t->parent(cmn_routing_state_next_hop_lists);
	cmn_routing_state_next_hop_lists->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_next_hop_lists_next_hop_list__id);
	t->config(false);
	t->validate(cmn_routing_state_next_hop_lists_next_hop_list__validate);
	t->commit(cmn_routing_state_next_hop_lists_next_hop_list__commit);
	t->description(cmn_routing_state_next_hop_lists_next_hop_list__dscr);
	t = cmn_routing_state_next_hop_lists;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("next-hop-lists");
	t->parent(cmn_routing_state);
	cmn_routing_state->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_next_hop_lists_validate);
	t->commit(cmn_routing_state_next_hop_lists_commit);
	t->description(cmn_routing_state_next_hop_lists_dscr);
	cmn_routing_state_ribs = new config_model_node;
	cmn_routing_state_ribs_rib_ = new config_model_node;
	cmn_routing_state_ribs_rib__name = new config_model_node;
	t = cmn_routing_state_ribs_rib__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_state_ribs_rib_);
	cmn_routing_state_ribs_rib_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__name_validate);
	t->commit(cmn_routing_state_ribs_rib__name_commit);
	t->description(cmn_routing_state_ribs_rib__name_dscr);
	t->format(fmt_string);
	cmn_routing_state_ribs_rib__routes = new config_model_node;
	cmn_routing_state_ribs_rib__routes_route_ = new config_model_node;
	cmn_routing_state_ribs_rib__routes_route__route_preference = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__route_preference;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("route-preference");
	t->parent(cmn_routing_state_ribs_rib__routes_route_);
	cmn_routing_state_ribs_rib__routes_route_->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__routes_route__route_preference_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__route_preference_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__route_preference_dscr);
	t->format(fmt_route_preference);
	cmn_routing_state_ribs_rib__routes_route__next_hop = new config_model_node;
	cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_list = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_list;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-list");
	t->parent(cmn_routing_state_ribs_rib__routes_route__next_hop);
	cmn_routing_state_ribs_rib__routes_route__next_hop->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_list_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_list_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_list_dscr);
	t->format(fmt_next_hop_list_ref);
	cmn_routing_state_ribs_rib__routes_route__next_hop_use_rib = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__next_hop_use_rib;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("use-rib");
	t->parent(cmn_routing_state_ribs_rib__routes_route__next_hop);
	cmn_routing_state_ribs_rib__routes_route__next_hop->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__next_hop_use_rib_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__next_hop_use_rib_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__next_hop_use_rib_dscr);
	t->format(fmt_rib_state_ref);
	cmn_routing_state_ribs_rib__routes_route__next_hop_outgoing_interface = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__next_hop_outgoing_interface;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("outgoing-interface");
	t->parent(cmn_routing_state_ribs_rib__routes_route__next_hop);
	cmn_routing_state_ribs_rib__routes_route__next_hop->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__next_hop_outgoing_interface_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__next_hop_outgoing_interface_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__next_hop_outgoing_interface_dscr);
	t->format(fmt_leafref);
	cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_address = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-address");
	t->parent(cmn_routing_state_ribs_rib__routes_route__next_hop);
	cmn_routing_state_ribs_rib__routes_route__next_hop->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_address_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_address_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_address_dscr);
	t->format(fmt_ipv4_address);
	cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop");
	t->parent(cmn_routing_state_ribs_rib__routes_route__next_hop);
	cmn_routing_state_ribs_rib__routes_route__next_hop->add_child(*t);
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__next_hop_next_hop_dscr);
	t->format(fmt_ipv6_address);
	cmn_routing_state_ribs_rib__routes_route__next_hop_special_next_hop = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__next_hop_special_next_hop;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("special-next-hop");
	t->parent(cmn_routing_state_ribs_rib__routes_route__next_hop);
	cmn_routing_state_ribs_rib__routes_route__next_hop->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__next_hop_special_next_hop_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__next_hop_special_next_hop_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__next_hop_special_next_hop_dscr);
	t->format(fmt_enumeration);
	t = cmn_routing_state_ribs_rib__routes_route__next_hop;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("next-hop");
	t->parent(cmn_routing_state_ribs_rib__routes_route_);
	cmn_routing_state_ribs_rib__routes_route_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__routes_route__next_hop_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__next_hop_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__next_hop_dscr);
	cmn_routing_state_ribs_rib__routes_route__source_protocol = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__source_protocol;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("source-protocol");
	t->parent(cmn_routing_state_ribs_rib__routes_route_);
	cmn_routing_state_ribs_rib__routes_route_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__source_protocol_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__source_protocol_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__source_protocol_dscr);
	t->format(fmt_identityref);
	cmn_routing_state_ribs_rib__routes_route__active = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__active;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("active");
	t->parent(cmn_routing_state_ribs_rib__routes_route_);
	cmn_routing_state_ribs_rib__routes_route_->add_child(*t);
	t->type(config_model_node_type::type_empty);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__active_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__active_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__active_dscr);
	t->format(fmt_empty);
	cmn_routing_state_ribs_rib__routes_route__last_updated = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__last_updated;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("last-updated");
	t->parent(cmn_routing_state_ribs_rib__routes_route_);
	cmn_routing_state_ribs_rib__routes_route_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__last_updated_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__last_updated_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__last_updated_dscr);
	t->format(fmt_date_and_time);
	cmn_routing_state_ribs_rib__routes_route__destination_prefix = new config_model_node;
	t = cmn_routing_state_ribs_rib__routes_route__destination_prefix;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("destination-prefix");
	t->parent(cmn_routing_state_ribs_rib__routes_route_);
	cmn_routing_state_ribs_rib__routes_route_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__routes_route__destination_prefix_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__destination_prefix_commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__destination_prefix_dscr);
	t->format(fmt_ipv4_prefix);
	t = cmn_routing_state_ribs_rib__routes_route_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("route");
	t->parent(cmn_routing_state_ribs_rib__routes);
	cmn_routing_state_ribs_rib__routes->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__routes_route__validate);
	t->commit(cmn_routing_state_ribs_rib__routes_route__commit);
	t->description(cmn_routing_state_ribs_rib__routes_route__dscr);
	t = cmn_routing_state_ribs_rib__routes;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("routes");
	t->parent(cmn_routing_state_ribs_rib_);
	cmn_routing_state_ribs_rib_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__routes_validate);
	t->commit(cmn_routing_state_ribs_rib__routes_commit);
	t->description(cmn_routing_state_ribs_rib__routes_dscr);
	cmn_routing_state_ribs_rib__recipient_ribs = new config_model_node;
	cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib_ = new config_model_node;
	cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__rib_name = new config_model_node;
	t = cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__rib_name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("rib-name");
	t->parent(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib_);
	cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__rib_name_validate);
	t->commit(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__rib_name_commit);
	t->description(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__rib_name_dscr);
	t->format(fmt_rib_state_ref);
	cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__filter = new config_model_node;
	t = cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__filter;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("filter");
	t->parent(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib_);
	cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__filter_validate);
	t->commit(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__filter_commit);
	t->description(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__filter_dscr);
	t->format(fmt_route_filter_state_ref);
	t = cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("recipient-rib");
	t->parent(cmn_routing_state_ribs_rib__recipient_ribs);
	cmn_routing_state_ribs_rib__recipient_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__rib_name);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__validate);
	t->commit(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__commit);
	t->description(cmn_routing_state_ribs_rib__recipient_ribs_recipient_rib__dscr);
	t = cmn_routing_state_ribs_rib__recipient_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("recipient-ribs");
	t->parent(cmn_routing_state_ribs_rib_);
	cmn_routing_state_ribs_rib_->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__recipient_ribs_validate);
	t->commit(cmn_routing_state_ribs_rib__recipient_ribs_commit);
	t->description(cmn_routing_state_ribs_rib__recipient_ribs_dscr);
	cmn_routing_state_ribs_rib__id = new config_model_node;
	t = cmn_routing_state_ribs_rib__id;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("id");
	t->parent(cmn_routing_state_ribs_rib_);
	cmn_routing_state_ribs_rib_->add_child(*t);
	t->type(config_model_node_type::type_uint64);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__id_validate);
	t->commit(cmn_routing_state_ribs_rib__id_commit);
	t->description(cmn_routing_state_ribs_rib__id_dscr);
	t->format(fmt_uint64);
	cmn_routing_state_ribs_rib__address_family = new config_model_node;
	t = cmn_routing_state_ribs_rib__address_family;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("address-family");
	t->parent(cmn_routing_state_ribs_rib_);
	cmn_routing_state_ribs_rib_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_state_ribs_rib__address_family_validate);
	t->commit(cmn_routing_state_ribs_rib__address_family_commit);
	t->description(cmn_routing_state_ribs_rib__address_family_dscr);
	t->format(fmt_identityref);
	t = cmn_routing_state_ribs_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("rib");
	t->parent(cmn_routing_state_ribs);
	cmn_routing_state_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_ribs_rib__name);
	t->add_unique(*cmn_routing_state_ribs_rib__id);
	t->config(false);
	t->validate(cmn_routing_state_ribs_rib__validate);
	t->commit(cmn_routing_state_ribs_rib__commit);
	t->description(cmn_routing_state_ribs_rib__dscr);
	t = cmn_routing_state_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ribs");
	t->parent(cmn_routing_state);
	cmn_routing_state->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_ribs_validate);
	t->commit(cmn_routing_state_ribs_commit);
	t->description(cmn_routing_state_ribs_dscr);
	cmn_routing_state_route_filters = new config_model_node;
	cmn_routing_state_route_filters_route_filter_ = new config_model_node;
	cmn_routing_state_route_filters_route_filter__name = new config_model_node;
	t = cmn_routing_state_route_filters_route_filter__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_state_route_filters_route_filter_);
	cmn_routing_state_route_filters_route_filter_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(false);
	t->validate(cmn_routing_state_route_filters_route_filter__name_validate);
	t->commit(cmn_routing_state_route_filters_route_filter__name_commit);
	t->description(cmn_routing_state_route_filters_route_filter__name_dscr);
	t->format(fmt_string);
	cmn_routing_state_route_filters_route_filter__type = new config_model_node;
	t = cmn_routing_state_route_filters_route_filter__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_routing_state_route_filters_route_filter_);
	cmn_routing_state_route_filters_route_filter_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(false);
	t->validate(cmn_routing_state_route_filters_route_filter__type_validate);
	t->commit(cmn_routing_state_route_filters_route_filter__type_commit);
	t->description(cmn_routing_state_route_filters_route_filter__type_dscr);
	t->format(fmt_identityref);
	t = cmn_routing_state_route_filters_route_filter_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("route-filter");
	t->parent(cmn_routing_state_route_filters);
	cmn_routing_state_route_filters->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_state_route_filters_route_filter__name);
	t->config(false);
	t->validate(cmn_routing_state_route_filters_route_filter__validate);
	t->commit(cmn_routing_state_route_filters_route_filter__commit);
	t->description(cmn_routing_state_route_filters_route_filter__dscr);
	t = cmn_routing_state_route_filters;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("route-filters");
	t->parent(cmn_routing_state);
	cmn_routing_state->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_route_filters_validate);
	t->commit(cmn_routing_state_route_filters_commit);
	t->description(cmn_routing_state_route_filters_dscr);
	t = cmn_routing_state;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("routing-state");
	t->parent(config_model_node_root);
	config_model_node_root->add_child(*t);
	t->presence(false);
	t->config(false);
	t->validate(cmn_routing_state_validate);
	t->commit(cmn_routing_state_commit);
	t->description(cmn_routing_state_dscr);
	cmn_routing = new config_model_node;
	cmn_routing_routing_instance_ = new config_model_node;
	cmn_routing_routing_instance__name = new config_model_node;
	t = cmn_routing_routing_instance__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__name_validate);
	t->commit(cmn_routing_routing_instance__name_commit);
	t->description(cmn_routing_routing_instance__name_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__type = new config_model_node;
	t = cmn_routing_routing_instance__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("rt:default-routing-instance");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__type_validate);
	t->commit(cmn_routing_routing_instance__type_commit);
	t->description(cmn_routing_routing_instance__type_dscr);
	t->format(fmt_identityref);
	cmn_routing_routing_instance__enabled = new config_model_node;
	t = cmn_routing_routing_instance__enabled;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("enabled");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__enabled_validate);
	t->commit(cmn_routing_routing_instance__enabled_commit);
	t->description(cmn_routing_routing_instance__enabled_dscr);
	t->format(fmt_boolean);
	cmn_routing_routing_instance__description = new config_model_node;
	t = cmn_routing_routing_instance__description;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("description");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__description_validate);
	t->commit(cmn_routing_routing_instance__description_commit);
	t->description(cmn_routing_routing_instance__description_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__default_ribs = new config_model_node;
	cmn_routing_routing_instance__default_ribs_default_rib_ = new config_model_node;
	cmn_routing_routing_instance__default_ribs_default_rib__rib_name = new config_model_node;
	t = cmn_routing_routing_instance__default_ribs_default_rib__rib_name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("rib-name");
	t->parent(cmn_routing_routing_instance__default_ribs_default_rib_);
	cmn_routing_routing_instance__default_ribs_default_rib_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_routing_instance__default_ribs_default_rib__rib_name_validate);
	t->commit(cmn_routing_routing_instance__default_ribs_default_rib__rib_name_commit);
	t->description(cmn_routing_routing_instance__default_ribs_default_rib__rib_name_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__default_ribs_default_rib__address_family = new config_model_node;
	t = cmn_routing_routing_instance__default_ribs_default_rib__address_family;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("address-family");
	t->parent(cmn_routing_routing_instance__default_ribs_default_rib_);
	cmn_routing_routing_instance__default_ribs_default_rib_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_routing_instance__default_ribs_default_rib__address_family_validate);
	t->commit(cmn_routing_routing_instance__default_ribs_default_rib__address_family_commit);
	t->description(cmn_routing_routing_instance__default_ribs_default_rib__address_family_dscr);
	t->format(fmt_identityref);
	t = cmn_routing_routing_instance__default_ribs_default_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("default-rib");
	t->parent(cmn_routing_routing_instance__default_ribs);
	cmn_routing_routing_instance__default_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__default_ribs_default_rib__address_family);
	t->config(true);
	t->validate(cmn_routing_routing_instance__default_ribs_default_rib__validate);
	t->commit(cmn_routing_routing_instance__default_ribs_default_rib__commit);
	t->description(cmn_routing_routing_instance__default_ribs_default_rib__dscr);
	t = cmn_routing_routing_instance__default_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("default-ribs");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__default_ribs_validate);
	t->commit(cmn_routing_routing_instance__default_ribs_commit);
	t->description(cmn_routing_routing_instance__default_ribs_dscr);
	cmn_routing_routing_instance__interfaces = new config_model_node;
	cmn_routing_routing_instance__interfaces_interface_ = new config_model_node;
	cmn_routing_routing_instance__interfaces_interface__name = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_routing_instance__interfaces_interface_);
	cmn_routing_routing_instance__interfaces_interface_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__name_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__name_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__name_dscr);
	t->format(fmt_interface_ref);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements = new config_model_node;
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("send-advertisements");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("false");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_send_advertisements_dscr);
	t->format(fmt_boolean);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("max-rtr-adv-interval");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("600");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_max_rtr_adv_interval_dscr);
	t->format(fmt_uint16);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("min-rtr-adv-interval");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_min_rtr_adv_interval_dscr);
	t->format(fmt_uint16);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("managed-flag");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("false");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_managed_flag_dscr);
	t->format(fmt_boolean);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("other-config-flag");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("false");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_other_config_flag_dscr);
	t->format(fmt_boolean);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("link-mtu");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("0");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_link_mtu_dscr);
	t->format(fmt_uint32);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("reachable-time");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("0");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_reachable_time_dscr);
	t->format(fmt_uint32);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("retrans-timer");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("0");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_retrans_timer_dscr);
	t->format(fmt_uint32);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("cur-hop-limit");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_cur_hop_limit_dscr);
	t->format(fmt_uint8);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("default-lifetime");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->type(config_model_node_type::type_uint16);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_default_lifetime_dscr);
	t->format(fmt_uint16);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list = new config_model_node;
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_ = new config_model_node;
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("prefix-spec");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec_dscr);
	t->format(fmt_ipv6_prefix);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__no_advertise = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__no_advertise;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("no-advertise");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_empty);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__no_advertise_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__no_advertise_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__no_advertise_dscr);
	t->format(fmt_empty);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("valid-lifetime");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("2592000");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__valid_lifetime_dscr);
	t->format(fmt_uint32);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("on-link-flag");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__on_link_flag_dscr);
	t->format(fmt_boolean);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("preferred-lifetime");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("604800");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__preferred_lifetime_dscr);
	t->format(fmt_uint32);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag = new config_model_node;
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("autonomous-flag");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__autonomous_flag_dscr);
	t->format(fmt_boolean);
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("prefix");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__prefix_spec);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_prefix__dscr);
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("prefix-list");
	t->parent(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements);
	cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_prefix_list_dscr);
	t = cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv6-router-advertisements");
	t->parent(cmn_routing_routing_instance__interfaces_interface_);
	cmn_routing_routing_instance__interfaces_interface_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__ipv6_router_advertisements_dscr);
	t = cmn_routing_routing_instance__interfaces_interface_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("interface");
	t->parent(cmn_routing_routing_instance__interfaces);
	cmn_routing_routing_instance__interfaces->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__interfaces_interface__name);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_interface__validate);
	t->commit(cmn_routing_routing_instance__interfaces_interface__commit);
	t->description(cmn_routing_routing_instance__interfaces_interface__dscr);
	t = cmn_routing_routing_instance__interfaces;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("interfaces");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__interfaces_validate);
	t->commit(cmn_routing_routing_instance__interfaces_commit);
	t->description(cmn_routing_routing_instance__interfaces_dscr);
	cmn_routing_routing_instance__routing_protocols = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol_ = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__type = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__type_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__type_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__type_dscr);
	t->format(fmt_identityref);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__name = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__name_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__name_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__name_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__description = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__description;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("description");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__description_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__description_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__description_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__enabled = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__enabled;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("enabled");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_boolean);
	t->default_("true");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__enabled_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__enabled_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__enabled_dscr);
	t->format(fmt_boolean);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__route_preference = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__route_preference;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("route-preference");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->type(config_model_node_type::type_uint32);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__route_preference_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__route_preference_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__route_preference_dscr);
	t->format(fmt_route_preference);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_ = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("rib-name");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name_dscr);
	t->format(fmt_rib_ref);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("import-filter");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__import_filter_dscr);
	t->format(fmt_route_filter_ref);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("export-filter");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__export_filter_dscr);
	t->format(fmt_route_filter_ref);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("connected-rib");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__rib_name);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_connected_rib__dscr);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("connected-ribs");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__connected_ribs_dscr);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4 = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_ = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__destination_prefix = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__destination_prefix;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("destination-prefix");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__destination_prefix_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__destination_prefix_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__destination_prefix_dscr);
	t->format(fmt_ipv4_prefix);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__description = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__description;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("description");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__description_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__description_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__description_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_ = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__name = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__name_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__name_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__name_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__outgoing_interface = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__outgoing_interface;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("outgoing-interface");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__outgoing_interface_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__outgoing_interface_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__outgoing_interface_dscr);
	t->format(fmt_leafref);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__next_hop_address = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__next_hop_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-address");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__next_hop_address_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__next_hop_address_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__next_hop_address_dscr);
	t->format(fmt_ipv4_address);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__priority = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__priority;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("priority");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__priority_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__priority_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__priority_dscr);
	t->format(fmt_enumeration);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__weight = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__weight;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("weight");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__weight_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__weight_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__weight_dscr);
	t->format(fmt_uint8);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("multipath-entry");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__name);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_multipath_entry__dscr);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_outgoing_interface = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_outgoing_interface;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("outgoing-interface");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_outgoing_interface_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_outgoing_interface_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_outgoing_interface_dscr);
	t->format(fmt_leafref);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_next_hop_address = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_next_hop_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-address");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_next_hop_address_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_next_hop_address_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_next_hop_address_dscr);
	t->format(fmt_ipv4_address);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("next-hop");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__next_hop_dscr);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("route");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__destination_prefix);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_route__dscr);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv4");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv4_dscr);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6 = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_ = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__destination_prefix = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__destination_prefix;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("destination-prefix");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__destination_prefix_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__destination_prefix_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__destination_prefix_dscr);
	t->format(fmt_ipv6_prefix);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__description = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__description;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("description");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__description_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__description_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__description_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_ = new config_model_node;
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__name = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__name_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__name_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__name_dscr);
	t->format(fmt_string);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__outgoing_interface = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__outgoing_interface;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("outgoing-interface");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__outgoing_interface_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__outgoing_interface_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__outgoing_interface_dscr);
	t->format(fmt_leafref);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__next_hop_address = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__next_hop_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-address");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__next_hop_address_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__next_hop_address_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__next_hop_address_dscr);
	t->format(fmt_ipv6_address);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__priority = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__priority;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("priority");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_enumeration);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__priority_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__priority_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__priority_dscr);
	t->format(fmt_enumeration);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__weight = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__weight;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("weight");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_->add_child(*t);
	t->type(config_model_node_type::type_uint8);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__weight_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__weight_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__weight_dscr);
	t->format(fmt_uint8);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("multipath-entry");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__name);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_multipath_entry__dscr);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_outgoing_interface = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_outgoing_interface;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("outgoing-interface");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_outgoing_interface_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_outgoing_interface_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_outgoing_interface_dscr);
	t->format(fmt_leafref);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_next_hop_address = new config_model_node;
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_next_hop_address;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("next-hop-address");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop->add_child(*t);
	t->add_pattern(*(new config_model_pattern("((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?")));
	t->add_pattern(*(new config_model_pattern("(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_next_hop_address_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_next_hop_address_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_next_hop_address_dscr);
	t->format(fmt_ipv6_address);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("next-hop");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__next_hop_dscr);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("route");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__destination_prefix);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_route__dscr);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ipv6");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes);
	cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_ipv6_dscr);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("static-routes");
	t->parent(cmn_routing_routing_instance__routing_protocols_routing_protocol_);
	cmn_routing_routing_instance__routing_protocols_routing_protocol_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__static_routes_dscr);
	t = cmn_routing_routing_instance__routing_protocols_routing_protocol_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("routing-protocol");
	t->parent(cmn_routing_routing_instance__routing_protocols);
	cmn_routing_routing_instance__routing_protocols->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__routing_protocols_routing_protocol__type);
	t->add_key(*cmn_routing_routing_instance__routing_protocols_routing_protocol__name);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_routing_protocol__validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_routing_protocol__commit);
	t->description(cmn_routing_routing_instance__routing_protocols_routing_protocol__dscr);
	t = cmn_routing_routing_instance__routing_protocols;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("routing-protocols");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__routing_protocols_validate);
	t->commit(cmn_routing_routing_instance__routing_protocols_commit);
	t->description(cmn_routing_routing_instance__routing_protocols_dscr);
	cmn_routing_routing_instance__router_id = new config_model_node;
	t = cmn_routing_routing_instance__router_id;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("router-id");
	t->parent(cmn_routing_routing_instance_);
	cmn_routing_routing_instance_->add_child(*t);
	t->add_pattern(*(new config_model_pattern("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])")));
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_routing_instance__router_id_validate);
	t->commit(cmn_routing_routing_instance__router_id_commit);
	t->description(cmn_routing_routing_instance__router_id_dscr);
	t->format(fmt_dotted_quad);
	t = cmn_routing_routing_instance_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("routing-instance");
	t->parent(cmn_routing);
	cmn_routing->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_routing_instance__name);
	t->config(true);
	t->validate(cmn_routing_routing_instance__validate);
	t->commit(cmn_routing_routing_instance__commit);
	t->description(cmn_routing_routing_instance__dscr);
	cmn_routing_ribs = new config_model_node;
	cmn_routing_ribs_rib_ = new config_model_node;
	cmn_routing_ribs_rib__name = new config_model_node;
	t = cmn_routing_ribs_rib__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_ribs_rib_);
	cmn_routing_ribs_rib_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__name_validate);
	t->commit(cmn_routing_ribs_rib__name_commit);
	t->description(cmn_routing_ribs_rib__name_dscr);
	t->format(fmt_string);
	cmn_routing_ribs_rib__description = new config_model_node;
	t = cmn_routing_ribs_rib__description;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("description");
	t->parent(cmn_routing_ribs_rib_);
	cmn_routing_ribs_rib_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__description_validate);
	t->commit(cmn_routing_ribs_rib__description_commit);
	t->description(cmn_routing_ribs_rib__description_dscr);
	t->format(fmt_string);
	cmn_routing_ribs_rib__recipient_ribs = new config_model_node;
	cmn_routing_ribs_rib__recipient_ribs_recipient_rib_ = new config_model_node;
	cmn_routing_ribs_rib__recipient_ribs_recipient_rib__rib_name = new config_model_node;
	t = cmn_routing_ribs_rib__recipient_ribs_recipient_rib__rib_name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("rib-name");
	t->parent(cmn_routing_ribs_rib__recipient_ribs_recipient_rib_);
	cmn_routing_ribs_rib__recipient_ribs_recipient_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__rib_name_validate);
	t->commit(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__rib_name_commit);
	t->description(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__rib_name_dscr);
	t->format(fmt_rib_ref);
	cmn_routing_ribs_rib__recipient_ribs_recipient_rib__filter = new config_model_node;
	t = cmn_routing_ribs_rib__recipient_ribs_recipient_rib__filter;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("filter");
	t->parent(cmn_routing_ribs_rib__recipient_ribs_recipient_rib_);
	cmn_routing_ribs_rib__recipient_ribs_recipient_rib_->add_child(*t);
	t->type(config_model_node_type::type_leafref);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__filter_validate);
	t->commit(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__filter_commit);
	t->description(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__filter_dscr);
	t->format(fmt_route_filter_ref);
	t = cmn_routing_ribs_rib__recipient_ribs_recipient_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("recipient-rib");
	t->parent(cmn_routing_ribs_rib__recipient_ribs);
	cmn_routing_ribs_rib__recipient_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_ribs_rib__recipient_ribs_recipient_rib__rib_name);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__validate);
	t->commit(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__commit);
	t->description(cmn_routing_ribs_rib__recipient_ribs_recipient_rib__dscr);
	t = cmn_routing_ribs_rib__recipient_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("recipient-ribs");
	t->parent(cmn_routing_ribs_rib_);
	cmn_routing_ribs_rib_->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__recipient_ribs_validate);
	t->commit(cmn_routing_ribs_rib__recipient_ribs_commit);
	t->description(cmn_routing_ribs_rib__recipient_ribs_dscr);
	cmn_routing_ribs_rib__address_family = new config_model_node;
	t = cmn_routing_ribs_rib__address_family;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("address-family");
	t->parent(cmn_routing_ribs_rib_);
	cmn_routing_ribs_rib_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__address_family_validate);
	t->commit(cmn_routing_ribs_rib__address_family_commit);
	t->description(cmn_routing_ribs_rib__address_family_dscr);
	t->format(fmt_identityref);
	t = cmn_routing_ribs_rib_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("rib");
	t->parent(cmn_routing_ribs);
	cmn_routing_ribs->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_ribs_rib__name);
	t->config(true);
	t->validate(cmn_routing_ribs_rib__validate);
	t->commit(cmn_routing_ribs_rib__commit);
	t->description(cmn_routing_ribs_rib__dscr);
	t = cmn_routing_ribs;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("ribs");
	t->parent(cmn_routing);
	cmn_routing->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_ribs_validate);
	t->commit(cmn_routing_ribs_commit);
	t->description(cmn_routing_ribs_dscr);
	cmn_routing_route_filters = new config_model_node;
	cmn_routing_route_filters_route_filter_ = new config_model_node;
	cmn_routing_route_filters_route_filter__name = new config_model_node;
	t = cmn_routing_route_filters_route_filter__name;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("name");
	t->parent(cmn_routing_route_filters_route_filter_);
	cmn_routing_route_filters_route_filter_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_route_filters_route_filter__name_validate);
	t->commit(cmn_routing_route_filters_route_filter__name_commit);
	t->description(cmn_routing_route_filters_route_filter__name_dscr);
	t->format(fmt_string);
	cmn_routing_route_filters_route_filter__description = new config_model_node;
	t = cmn_routing_route_filters_route_filter__description;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("description");
	t->parent(cmn_routing_route_filters_route_filter_);
	cmn_routing_route_filters_route_filter_->add_child(*t);
	t->type(config_model_node_type::type_string);
	t->default_("");
	t->mandatory(false);
	t->config(true);
	t->validate(cmn_routing_route_filters_route_filter__description_validate);
	t->commit(cmn_routing_route_filters_route_filter__description_commit);
	t->description(cmn_routing_route_filters_route_filter__description_dscr);
	t->format(fmt_string);
	cmn_routing_route_filters_route_filter__type = new config_model_node;
	t = cmn_routing_route_filters_route_filter__type;
	t->statement(config_model_node_statement::statement_leaf);
	t->identifier("type");
	t->parent(cmn_routing_route_filters_route_filter_);
	cmn_routing_route_filters_route_filter_->add_child(*t);
	t->type(config_model_node_type::type_identityref);
	t->default_("");
	t->mandatory(true);
	t->config(true);
	t->validate(cmn_routing_route_filters_route_filter__type_validate);
	t->commit(cmn_routing_route_filters_route_filter__type_commit);
	t->description(cmn_routing_route_filters_route_filter__type_dscr);
	t->format(fmt_identityref);
	t = cmn_routing_route_filters_route_filter_;
	t->statement(config_model_node_statement::statement_list);
	t->identifier("route-filter");
	t->parent(cmn_routing_route_filters);
	cmn_routing_route_filters->add_child(*t);
	t->min_elements(-1);
	t->max_elements(-1);
	t->ordered_by(config_model_node_ordered_by::ordered_by_system);
	t->add_key(*cmn_routing_route_filters_route_filter__name);
	t->config(true);
	t->validate(cmn_routing_route_filters_route_filter__validate);
	t->commit(cmn_routing_route_filters_route_filter__commit);
	t->description(cmn_routing_route_filters_route_filter__dscr);
	t = cmn_routing_route_filters;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("route-filters");
	t->parent(cmn_routing);
	cmn_routing->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_route_filters_validate);
	t->commit(cmn_routing_route_filters_commit);
	t->description(cmn_routing_route_filters_dscr);
	t = cmn_routing;
	t->statement(config_model_node_statement::statement_container);
	t->identifier("routing");
	t->parent(config_model_node_root);
	config_model_node_root->add_child(*t);
	t->presence(false);
	t->config(true);
	t->validate(cmn_routing_validate);
	t->commit(cmn_routing_commit);
	t->description(cmn_routing_dscr);
}

